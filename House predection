import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline
from sklearn.linear_model import LassoCV
from sklearn.preprocessing import StandardScaler,RobustScaler

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline
from sklearn.datasets import make_classification
from sklearn.model_selection import RandomizedSearchCV
from sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor
from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier
from sklearn.model_selection import cross_val_score, train_test_split, GridSearchCV
from sklearn.linear_model import Ridge, Lasso, LinearRegression, RidgeCV, LassoCV, ElasticNetCV
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.metrics import mean_squared_error
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import BaggingRegressor
from sklearn import preprocessing
train = pd.read_csv(r"C:\Users\divya\Downloads\train (1).csv")
test = pd.read_csv(r"C:\Users\divya\Downloads\test (1).csv")
train = pd.read_csv(r"C:\Users\divya\Downloads\train (1).csv")
test = pd.read_csv(r"C:\Users\divya\Downloads\test (1).csv")
df.shape
df.isnull().sum()
quan = list( test.loc[:,test.dtypes != 'object'].drop('Id',axis=1).columns.values )
qual = list( test.loc[:,test.dtypes == 'object'].columns.values )
print('Quantitative\n')
hasNAN = df[quan].isnull().sum()
hasNAN = hasNAN[hasNAN > 0]
hasNAN = hasNAN.sort_values(ascending=False)
print(hasNAN)
print ('-' * 100)
print('Qualitative\n')
hasNAN = df[qual].isnull().sum()
hasNAN = hasNAN[hasNAN > 0]
hasNAN = hasNAN.sort_values(ascending=False)
print(hasNAN)
print(df[['LotShape', 'Neighborhood','LotFrontage']].loc[df['LotFrontage'].isnull()])
df.LotFrontage.fillna(df.LotFrontage.median(), inplace=True)
df["LotFrontage"] = df["LotFrontage"].fillna(df.groupby(["Neighborhood", "LotShape"])["LotFrontage"].transform("median"))

df.GarageYrBlt.fillna(0, inplace=True)

df.MasVnrArea.fillna(0, inplace=True)    
df.BsmtHalfBath.fillna(0, inplace=True)
df.BsmtFullBath.fillna(0, inplace=True)
df.GarageArea.fillna(0, inplace=True)
df.GarageCars.fillna(0, inplace=True)    
df.TotalBsmtSF.fillna(0, inplace=True)   
df.BsmtUnfSF.fillna(0, inplace=True)     
df.BsmtFinSF2.fillna(0, inplace=True)    
df.BsmtFinSF1.fillna(0, inplace=True)
df.Electrical.fillna(df.Electrical.mode()[0], inplace=True) 
df.PoolQC.fillna('NA', inplace=True)
df.MiscFeature.fillna('NA', inplace=True)    
df.Alley.fillna('NA', inplace=True)          
df.Fence.fillna('NA', inplace=True)         
df.FireplaceQu.fillna('NA', inplace=True)    
df.GarageCond.fillna('NA', inplace=True)    
df.GarageQual.fillna('NA', inplace=True)     
df.GarageFinish.fillna('NA', inplace=True)   
df.GarageType.fillna('NA', inplace=True)     
df.BsmtExposure.fillna('NA', inplace=True)     
df.BsmtCond.fillna('NA', inplace=True)        
df.BsmtQual.fillna('NA', inplace=True)        
df.BsmtFinType2.fillna('NA', inplace=True)     
df.BsmtFinType1.fillna('NA', inplace=True)     
df.MasVnrType.fillna('None', inplace=True)   
df.Exterior2nd.fillna('None', inplace=True) 

df.KitchenQual.fillna('NA', inplace=True)        
df.Exterior1st.fillna('NA', inplace=True)     
df.SaleType.fillna('NA', inplace=True)
df.Functional.fillna('NA', inplace=True)
df.Utilities.fillna('NA', inplace=True)
for i in df.Neighborhood.unique():
    if df.MSZoning[df.Neighborhood == i].isnull().sum() > 0:
        df.loc[df.Neighborhood == i,'MSZoning'] = \
        df.loc[df.Neighborhood == i,'MSZoning'].fillna(df.loc[df.Neighborhood == i,'MSZoning'].mode()[0])
df.describe()
fig = plt.subplots(nrows = 1, ncols = 1, figsize = (18, 6))
sns.heatmap(df[qual].isnull(), yticklabels=False, cbar=False, cmap='viridis')
plt.figure(figsize=(40,30))
corrMatrix = df[quan].corr()
sns.heatmap(corrMatrix, annot=True, cmap='coolwarm')
df[quan].isnull().sum()
df.duplicated(subset=None, keep='first').sum()
df.Heating.value_counts()
df["Heating"] = df["Heating"].apply(lambda x: "Other" if x != "GasA" else x)
df.MasVnrType.value_counts()
df["MasVnrType"] = df["MasVnrType"].apply(lambda x: "None" if x in ["None", "BrkCmn"] else x)
df.RoofMatl.value_counts()
df["RoofMatl"] = df["RoofMatl"].apply(lambda x: "Other" if x != "CompShg" else x)
df.RoofStyle.value_counts()
df["RoofStyle"] = df["RoofStyle"].apply(lambda x: "Other" if x not in ["Gable",'Hip'] else x)
df.SaleType.value_counts()
df["SaleType"] = df["SaleType"].apply(lambda x: "Other" if x not in ["WD",'New'] else x)#edited
df.SaleCondition.value_counts()
df["SaleCondition"] = df["SaleCondition"].apply(lambda x: "Other" if x not in ["Normal",'Partial'] else x)
df.GarageType.value_counts()
df["GarageType"] = df["GarageType"].apply(lambda x: "Other" if x not in ["Attchd",'Detchd','BuiltIn'] else x)
df.BldgType.value_counts()
df["BldgType"] = df["BldgType"].apply(lambda x: "2Fam" if x in ["2fmCon", "Duplex",'Twnhs','TwnhsE'] else x)
df.PoolQC.value_counts()
df["PoolQC"] = df["PoolQC"].apply(lambda x: "NA" if x in ["Fa", "Gd"] else x)## i think this column
df["FireplaceQu"] = df["FireplaceQu"].apply(lambda x: "other" if x in ["Fa", "Po",'Ex'] else x)## i think this column
df.Functional.value_counts()
df["Functional"] = df["Functional"].apply(lambda x: 'Typ' if x == 'Typ' else 'Min1')
df.Alley = df.Alley.map({'NA':0, 'Grvl':1, 'Pave':2})
df.BsmtCond =  df.BsmtCond.map({'NA':0, 'Po':1, 'Fa':2, 'TA':3, 'Gd':4, 'Ex':5})
df.BsmtExposure = df.BsmtExposure.map({'NA':0, 'No':1, 'Mn':2, 'Av':3, 'Gd':4})
df['BsmtFinType1'] = df['BsmtFinType1'].map({'NA':0, 'Unf':1, 'LwQ':2, 'Rec':3, 'BLQ':4, 'ALQ':5, 'GLQ':6})
df['BsmtFinType2'] = df['BsmtFinType2'].map({'NA':0, 'Unf':1, 'LwQ':2, 'Rec':3, 'BLQ':4, 'ALQ':5, 'GLQ':6})
df.BsmtQual = df.BsmtQual.map({'NA':0, 'Po':1, 'Fa':2, 'TA':3, 'Gd':4, 'Ex':5})
df.ExterCond = df.ExterCond.map({'Po':1, 'Fa':2, 'TA':3, 'Gd':4, 'Ex':5})
df.ExterQual = df.ExterQual.map({'Po':1, 'Fa':2, 'TA':3, 'Gd':4, 'Ex':5})
df.FireplaceQu = df.FireplaceQu.map({'NA':0, 'TA':1, 'Gd':2, 'other':3})
df.Functional = df.Functional.map({ 'Min1':2, 'Typ':1})
df.GarageCond = df.GarageCond.map({'NA':0, 'Po':1, 'Fa':2, 'TA':3, 'Gd':4, 'Ex':5})
df.GarageQual = df.GarageQual.map({'NA':0, 'Po':1, 'Fa':2, 'TA':3, 'Gd':4, 'Ex':5})
df.HeatingQC = df.HeatingQC.map({'Po':1, 'Fa':2, 'TA':3, 'Gd':4, 'Ex':5})
df.KitchenQual = df.KitchenQual.map({'NA':0,'Po':1, 'Fa':2, 'TA':3, 'Gd':4, 'Ex':5})
df.LandSlope = df.LandSlope.map({'Sev':1, 'Mod':2, 'Gtl':3}) 
df.PavedDrive = df.PavedDrive.map({'N':1, 'P':2, 'Y':3})
df.PoolQC = df.PoolQC.map({'NA':0,'Ex':1})
df.Street = df.Street.map({'Grvl':1, 'Pave':2})
df.Utilities = df.Utilities.map({'NA':0,'ELO':1, 'NoSeWa':2, 'NoSewr':3, 'AllPub':4})
newquan = ['Alley','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','BsmtQual',
           'ExterCond','ExterQual','FireplaceQu','Functional','GarageCond',
           'GarageQual','HeatingQC','KitchenQual','LandSlope','PavedDrive','PoolQC',
           'Street','Utilities']
quan = quan + newquan 
for i in newquan: qual.remove(i)
df.MSSubClass = df.MSSubClass.map({20:'class1', 30:'class2', 40:'class3', 45:'class4',
                                   50:'class5', 60:'class6', 70:'class7', 75:'class8',
                                   80:'class9', 85:'class10', 90:'class11', 120:'class12',
      
df=df.drop('MoSold',axis=1)
quan.remove('MoSold')
quan.remove('MSSubClass')
qual.append('MSSubClass')
150:'class13', 160:'class14', 180:'class15', 190:'class16'})
df['Age'] = df.YrSold - df.YearBuilt
df['AgeRemod'] = df.YrSold - df.YearRemodAdd
df['AgeGarage'] = df.YrSold - df.GarageYrBlt

max_AgeGarage = np.max(df.AgeGarage[df.AgeGarage < 1000])
df['AgeGarage'] = df['AgeGarage'].map(lambda x: max_AgeGarage if x > 1000 else x)

df.Age = df.Age.map(lambda x: 0 if x < 0 else x)
df.AgeRemod = df.AgeRemod.map(lambda x: 0 if x < 0 else x)
df.AgeGarage = df.AgeGarage.map(lambda x: 0 if x < 0 else x)

df=df.drop(['YrSold','YearBuilt','YearRemodAdd','GarageYrBlt'],axis=1)

for i in ['YrSold','YearBuilt','YearRemodAdd','GarageYrBlt']: quan.remove(i)
quan = quan + ['Age','AgeRemod','AgeGarage']
df.shape
df.head()
index_drop = df.LotFrontage[df.LotFrontage > 300].index
index_drop = np.append(index_drop, df.LotArea[df.LotArea > 100000].index)
index_drop = np.append(index_drop, df.BsmtFinSF1[df.BsmtFinSF1 > 4000].index)
index_drop = np.append(index_drop, df.TotalBsmtSF[df.TotalBsmtSF > 6000].index)
index_drop = np.append(index_drop, df['1stFlrSF'][df['1stFlrSF'] > 4000].index)
index_drop = np.append(index_drop, df.GrLivArea[(df.GrLivArea > 4000) & (df.SalePrice < 13)].index)
index_drop = np.unique(index_drop)

index_drop = index_drop[index_drop < 1460] 

df = df.drop(index_drop).reset_index(drop=True)
print("{} examples in the training set are dropped.".format(len(index_drop)))
index_drop = df.LotFrontage[df.LotFrontage > 300].index
index_drop = np.append(index_drop, df.LotArea[df.LotArea > 100000].index)
index_drop = np.append(index_drop, df.BsmtFinSF1[df.BsmtFinSF1 > 4000].index)
index_drop = np.append(index_drop, df.TotalBsmtSF[df.TotalBsmtSF > 6000].index)
index_drop = np.append(index_drop, df['1stFlrSF'][df['1stFlrSF'] > 4000].index)
index_drop = np.append(index_drop, df.GrLivArea[(df.GrLivArea > 4000) & (df.SalePrice < 13)].index)
index_drop = np.unique(index_drop)

index_drop = index_drop[index_drop < 1460] 

df = df.drop(index_drop).reset_index(drop=True)
print("{} examples in the training set are dropped.".format(len(index_drop)))
ridgecv = RidgeCV(alphas=np.logspace(.1, 10, 30))    
ridgecv.fit(X_train, y_train)
ridgecv_score=ridgecv.score(X_train, y_train)
ridgecv_score
ridgecv.score(X_test, y_test)
ridgecv.alpha_
predection=ridgecv.predict(X_train)
ridge_mse = mean_squared_error(y_train, predection)
ridge_rmse = np.sqrt(ridge_mse)
ridge_rmse
logreg.score(X_test, testing_y)
print("RMSE of the rmse: {}".format(rmse(y_train, logreg.predict(X_train))))
